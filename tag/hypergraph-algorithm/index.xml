<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hypergraph algorithm | Sagnik Mukhopadhyay</title>
    <link>https://sagnikm.github.io/tag/hypergraph-algorithm/</link>
      <atom:link href="https://sagnikm.github.io/tag/hypergraph-algorithm/index.xml" rel="self" type="application/rss+xml" />
    <description>Hypergraph algorithm</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 18 Feb 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sagnikm.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Hypergraph algorithm</title>
      <link>https://sagnikm.github.io/tag/hypergraph-algorithm/</link>
    </image>
    
    <item>
      <title>Faster Connectivity in Low-Rank Hypergraphs via Expander Decomposition</title>
      <link>https://sagnikm.github.io/publication/ipco2022/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/ipco2022/</guid>
      <description>&lt;p&gt;We design an algorithm for computing connectivity in hypergraphs which runs in time $\hat O_r(p + \min{\lambda n^2, n^r/\lambda})$, where $p$ is the size, $n$ is the number of vertices, $r$ is the rank (size of the largest hyperedge), and $\lambda$ is the connectivity of the hypergraph. The $\hat O_r(\cdot)$ hides terms that are subpolynomial in the main parameter and terms that depend only on $r$. Our algorithm is faster than existing algorithms when the connectivity $\lambda$ is $\Omega(n^{(r-2)/2})$.
The heart of our algorithm is a structural result regarding min-cuts in simple hypergraphs. We show a trade-off between the number of hyperedges taking part in all min-cuts and the size of the smaller side of the min-cut. This structural result can be viewed as a generalization of a well-known structural theorem for simple graphs [Kawarabayashi-Thorup, JACM 19].  We extend the framework of expander decomposition to simple hypergraphs in order to prove this structural result. We also make the proof of the structural result constructive to obtain our faster hypergraph connectivity algorithm.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
