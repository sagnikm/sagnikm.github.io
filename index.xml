<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sagnik Mukhopadhyay</title>
    <link>https://sagnikm.github.io/</link>
      <atom:link href="https://sagnikm.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Sagnik Mukhopadhyay</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sagnikm.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Sagnik Mukhopadhyay</title>
      <link>https://sagnikm.github.io/</link>
    </image>
    
    <item>
      <title>Lectures</title>
      <link>https://sagnikm.github.io/courses/comm-comp-2018/lectures/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://sagnikm.github.io/courses/comm-comp-2018/lectures/</guid>
      <description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Lecture #&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;th&gt;Reference&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Introduction to communication complexity, protocol partition and tiling, clique vs independent set.&lt;/td&gt;
&lt;td&gt;KN97 (§ 1.1, 1.2, 2.2, 2.3), Juk12 (§ 3.2, 4.4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Fooling set and rectangle size bound, rank bound, comparison of two techniques, non-determinism.&lt;/td&gt;
&lt;td&gt;KN97 (§ 1.3, 1.4, 2.1, 2.5), DHS96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;More on non-determinism, $P = NP \cap coNP$, Separation of $P$ and $NP \cap coNP$, $UP$, Decision tree and composed functions.&lt;/td&gt;
&lt;td&gt;KN97 (§ 2.3 - 2.5), Juk11 (§ 13.4), GPW15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Simulation theorem (I): Hitting distribution for $GH$, The simulation algorithm.&lt;/td&gt;
&lt;td&gt;GPW15, CKLM17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Simulation theorem (II): Thickness and its properties, The simulation algorithm.&lt;/td&gt;
&lt;td&gt;GPW15, CKLM17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Randomization: Zero-error, one-sided error, $EQ$ function and separations, Private coin vs public coin.&lt;/td&gt;
&lt;td&gt;KN97 (§ 3.1 - 3.3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Protocol for $GT, DISJ_{nk}$, Distributional complexity, Yao&amp;rsquo;s minimax principle.&lt;/td&gt;
&lt;td&gt;KN97 (§ 3.4), HW07&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Discrepancy: lower bound for $IP_n, GT_n$; Disjointness under product distribution.&lt;/td&gt;
&lt;td&gt;KN97 (§ 3.5), CP10, BW16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Disjointness under product distribution: Lower bound and upper bound.&lt;/td&gt;
&lt;td&gt;CP10, BFS86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Corruption bound, Razborov&amp;rsquo;s hard distribution for $DISJ_n$, Index function.&lt;/td&gt;
&lt;td&gt;KN97 (§ 4.6), CP10, GW16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;Information theory primer, Index function lower bound, Information complexity.&lt;/td&gt;
&lt;td&gt;RY18 (§ 6.1 - 6.4), BJKS04, JKS03&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Direct sum of information complexity, Lower bound for $DISJ_n$.&lt;/td&gt;
&lt;td&gt;RY18 (§ 6.1 - 6.4), BJKS04, JKS03, Bra17, BR11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Asymmetric communication complexity, Richness method, Index function and lopsided $DISJ$, Application in data-structure.&lt;/td&gt;
&lt;td&gt;KN97 (§ 4.3), MNWS98&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;Lecture by Jakob Nordström (I). Proof systems, Proof complexity and communication complexity, (Critical) block sensitivity.&lt;/td&gt;
&lt;td&gt;HN12, &lt;a href=&#34;https://drive.google.com/file/d/1BNkF9ZHgycqFLLihd-OfuDOAaD3_BUfb/view&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Notes&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;Lecture by Jakob Nordström (II). Communication complexity of lifted search problem.&lt;/td&gt;
&lt;td&gt;HN12, &lt;a href=&#34;https://drive.google.com/file/d/1PSVnNYtdpBauUjt2CyQ1ZDZxtw-LZH8a/view&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Notes&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>References</title>
      <link>https://sagnikm.github.io/courses/comm-comp-2018/references/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://sagnikm.github.io/courses/comm-comp-2018/references/</guid>
      <description>&lt;p&gt;[Bra17] Mark Braverman. Interactive Information Complexity. SIAM Review, 59(4):803-846, 2017. &lt;a href=&#34;https://doi.org/10.1137/17M1139254&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[BFS86] László Babai, Peter Frankl, and Janos Simon. Complexity classes in communication complexity theory (preliminary version). In Proc. 27th IEEE Symp. on Foundations of Comp. Science (FOCS), pages 337-347, 1986. &lt;a href=&#34;http://dx.doi.org/10.1109/SFCS.1986.15&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[BJKS04] Ziv Bar-Yossef, T. S. Jayram, Ravi Kumar, and D. Sivakumar. An information statistics approach to data stream and communication complexity. J. Computer and System Sciences, 68(4):702-732, June 2004. (Preliminary Version in 43rd FOCS, 2002). &lt;a href=&#34;http://dx.doi.org/10.1016/j.jcss.2003.11.006&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[BR11] Mark Braverman and Anup Rao. Towards coding for maximum errors in interactive communication. In STOC, pages 159-166, 2011. &lt;a href=&#34;http://doi.acm.org/10.1145/1993636.1993659&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[BW16] Mark Braverman and Omri Weinstein. A Discrepancy Lower Bound for Information Complexity. Algorithmica, 76(3):846-864, 2016. &lt;a href=&#34;https://doi.org/10.1007/s00453-015-0093-8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[CP10] Arkadev Chattopadhyay and Toniann Pitassi. The story of set disjointness. SIGACT News, 41(3):59-85, 2010. &lt;a href=&#34;http://dx.doi.org/10.1145/1855118.18551330&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[CKLM17] Arkadev Chattopadhyay, Michal Koucký, Bruno Loff and Sagnik Mukhopadhyay. Simulation Theorems via Pseudorandom Properties. CoRR.abs/1704.06807, 2017. &lt;a href=&#34;http://arxiv.org/abs/1704.068070&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; ArXiv &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[DHS96] Martin Dietzfelbinger, Juraj Hromkovic, and Georg Schnitger. A Comparison of Two Lower-Bound Methods for Communication Complexity. Theor. Comput. Sci., 168(1):39-51, 1996. &lt;a href=&#34;https://doi.org/10.1016/S0304-3975%2896%2900062-X&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[GPW15] Mika Göös, Toniann Pitassi and Thomas Watson. Deterministic Communication vs. Partition Number. Proceedings of 56th FOCS, 1077-1088, 2015. &lt;a href=&#34;https://doi.org/10.1109/FOCS.2015.70&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[GW16] Mika Göös and Thomas Watson. Communication Complexity of Set-Disjointness for All Probabilities. Theory of Computing, 12(1):1-23, 2016. &lt;a href=&#34;https://doi.org/10.4086/toc.2016.v012a009&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[HN12] Trinh Huynh and Jakob Nordström. On the virtue of succinct proofs: amplifying communication complexity hardness to time-space trade-offs in proof complexity. Proceedings of the 44th STOC, 233-248, 2012. &lt;a href=&#34;http://doi.acm.org/10.1145/2213977.2214000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[HW07] Johan Håstad and Avi Wigderson. The Randomized Communication Complexity of Set Disjointness. Theory of Computing, 3(1):211-219, 2007. &lt;a href=&#34;https://doi.org/10.4086/toc.2007.v003a011&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[JKS03] T. S. Jayram, Ravi Kumar, and D. Sivakumar. Two applications of information complexity. In Proc. 35th ACM Symp. on Theory of Computing (STOC), pages 673-682, 2003. &lt;a href=&#34;http://dx.doi.org/10.1145/780542.780640&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[Juk11] Stasys Jukna. Extremal Combinatorics - With Applications in Computer Science. Springer, 2011. &lt;a href=&#34;https://doi.org/10.1007/978-3-642-17364-6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[Juk12] Stasys Jukna. Boolean Function Complexity - Advances and Frontiers. Springer, 2012. &lt;a href=&#34;https://doi.org/10.1007/978-3-642-24508-4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[KN97] Eyal Kushilevitz and Noam Nisan. Communication Complexity. Cambridge University Press, 1997. &lt;a href=&#34;http://dx.doi.org/10.2277/052102983X&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[MNWS98] Peter Bro Miltersen, Noam Nisan, Shmuel Safra and Avi Wigderson On Data Structures and Asymmetric Communication Complexity. J. Comput. Syst. Sci., 57(1): 37-49, 1998. &lt;a href=&#34;https://doi.org/10.1006/jcss.1998.1577&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DOI &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[RY18] Anup Rao and Amir Yehudayoff. Communication Complexity (Early Draft). &lt;a href=&#34;https://homes.cs.washington.edu/~anuprao/pubs/book.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; URL &lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://sagnikm.github.io/talk/example-talk/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/talk/example-talk/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Wowchemy&amp;rsquo;s &lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further event details, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;page elements&lt;/a&gt; such as image galleries, can be added to the body of this page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finding a Small Vertex Cut on Distributed Networks</title>
      <link>https://sagnikm.github.io/publication/stoc2023a/</link>
      <pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stoc2023a/</guid>
      <description>&lt;p&gt;We present an algorithm for distributed networks to efficiently find a small vertex cut in the CONGEST model. Given a positive integer $\kappa$, our algorithm can, with high probability, either find $\kappa$ vertices whose removal disconnects the network or return that such $\kappa$ vertices do not exist. Our algorithm takes $\kappa^3\cdot \tilde{O}(D+\sqrt{n})$ rounds, where $n$ is the number of vertices in the network and $D$ denotes the network&amp;rsquo;s diameter. This implies $\tilde{O}(D+\sqrt{n})$ round complexity whenever $\kappa=\polylog(n)$.&lt;/p&gt;
&lt;p&gt;Prior to our result, a similar bound of $\tilde{O}(D+\sqrt{n})$  is known only when $\kappa=1$ [Thurimella PODC&#39;95]. For $\kappa\geq 2$, this bound can be obtained only by an $O(\log n)$-approximation algorithm [Censor-Hillel, Ghaffari, Kuhn PODC&#39;14], and the only known exact algorithm takes  $O\left((\conn\Delta D)^{O(\conn)}\right)$ rounds, where $\Delta$ is the maximum degree [Parter DISC&#39;19]. Our result answers an open problem by Nanongkai, Saranurak, and Yingchareonthawornchai [STOC&#39;19].&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fast Algorithms via Dynamic-Oracle Matroids</title>
      <link>https://sagnikm.github.io/publication/stoc2023b/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stoc2023b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Towards Understanding Challenges of Computation over Large Network</title>
      <link>https://sagnikm.github.io/project/graphcom/</link>
      <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/project/graphcom/</guid>
      <description>&lt;h1 id=&#34;hiring&#34;&gt;Hiring!&lt;/h1&gt;
&lt;p&gt;I am looking for a motivated and mathematically inclined PhD student
with previous experience in courses/modules in theoretical computer science.
This position is based in the Department of Computer Science in the University
of Sheffield and comes with full tuition fee and stipend. Travel support is also
available. The potential candidate will be expected to support algorithms teaching
in the department (which will be paid additionally).&lt;/p&gt;
&lt;p&gt;A strong interest in graph algorithms, complexity theory, distributed and
streaming algorithms and/or combinatorial optimization will be a
plus. Starting date is negotiable. Please see below for a brief motivation and
papers of interest.&lt;/p&gt;
&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;After a long-drawn war, two nations, Oceania and Eurasia,
are now at peace but in not much of talking terms. However,
they will have to figure out how much shipment their
combined rail network can carry from the capital city of
Oceania to that of Eurasia. Both Oceania and Eurasia know
about their own rail networks in detail, but none of them
knows anything about other nation&amp;rsquo;s network plans. Because
of the political situation, they want to keep communication
between them to a minimum. You are the chief researcher of
Eurasia, in contact with Winston Smith, the chief researcher
of Oceania. How much communication do you need to do to
figure it out?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The aim of this project is to investigate such fundamental
network problems where the network data is distributed
between multiple processors. Such problems appear in
countless guises in modern life: The transportation problem
mentioned before is inspired by actual logistic
difficulties that kept the US and Russia busy during the
first half of the 20th century (see
&lt;a href=&#34;https://tinyurl.com/2p844c2y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://tinyurl.com/2p844c2y&lt;/a&gt; for a fun read). In the modern
realm of data explosion, these network questions are more
topical than ever: The network data (think of the friendship
network of Facebook or the follower network of Twitter or
the hyperlink network of Google) is usually too large to be
stored in a single computational processor and hence is
generally distributed among a large number of
processors/servers who need to communicate with each other
via a network in order to perform various computational tasks.
This problem is generally addressed via different storage
architectures for fast access and efficient software
paradigms such as MapReduce, Hadoop, and Spark.&lt;/p&gt;
&lt;p&gt;Many traditional algorithms that were widely used in the
past have become greatly inefficient in practice for such
distributed systems. The main goal of the proposed research
is to design (or prove the hardness of) fundamental network
algorithms and their generalisations in such distributed
models of computation. To be concrete, we will mainly be
interested in the following two models in this project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two-party communication protocols: The graph data is distributed to two machines, namely Alice and Bob. Machines can access their local data for free, but it costs for them to communicate.&lt;/li&gt;
&lt;li&gt;Query protocols: The graph data is stored in external memory (e.g., among many external servers or cloud) and the local machine is allowed to access the data only by query accesses which can be answered quickly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project will lead to major advances in our understanding of &amp;ldquo;distributed
network algorithms&amp;rdquo;, which is an important research area within theoretical
computer science that is concerned with addressing precisely the question
described above.&lt;/p&gt;
&lt;h1 id=&#34;a-few-papers-of-interest&#34;&gt;A few papers of interest&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Li Chen, Rasmus Kyng, Yang P. Liu, Richard Peng, Maximilian Probst Gutenberg, Sushant Sachdeva
Maximum Flow and Minimum-Cost Flow in Almost-Linear Time
PDF: &lt;a href=&#34;https://arxiv.org/abs/2203.00671&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://arxiv.org/abs/2203.00671&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Haotian Jiang:
Minimizing Convex Functions with Integral Minimizers. SODA 2021: 976-985
PDF: &lt;a href=&#34;https://arxiv.org/abs/2007.01445&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://arxiv.org/abs/2007.01445&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nicholas J. A. Harvey:
Matroid intersection, pointer chasing, and Young&amp;rsquo;s seminormal representation of Sn. SODA 2008: 542-549
PDF:  &lt;a href=&#34;https://dl-acm-org.focus.lib.kth.se/citation.cfm?id=1347142&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dl-acm-org.focus.lib.kth.se/citation.cfm?id=1347142&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Andrei Graur, Tristan Pollner, Vidhya Ramaswamy, S. Matthew Weinberg:
New Query Lower Bounds for Submodular Function Minimization. ITCS 2020: 64:1-64:16
PDF: &lt;a href=&#34;https://arxiv.org/abs/1911.06889&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://arxiv.org/abs/1911.06889&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yu Chen, Sanjeev Khanna, Ansh Nagda:
Near-linear Size Hypergraph Cut Sparsifiers. FOCS 2020: 61-72
PDF: &lt;a href=&#34;https://arxiv.org/abs/2009.04992&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://arxiv.org/abs/2009.04992&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chandra Chekuri, Chao Xu:
Minimum Cuts and Sparsification in Hypergraphs. SIAM J. Comput. 47(6): 2118-2156 (2018)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sagnik Mukhopadhyay, Danupon Nanongkai:
Weighted Min-Cut: Sequential, Cut-Query and Streaming Algorithms. CoRR abs/1911.01651 (2019)
PDF: &lt;a href=&#34;https://arxiv.org/abs/1911.01651&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://arxiv.org/abs/1911.01651&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S. Apers and T. Lee
Quantum complexity of minimum cut.
PDF: &lt;a href=&#34;https://arxiv.org/abs/2011.09823&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://arxiv.org/abs/2011.09823&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Noam Nisan, Avi Wigderson: Rounds in Communication Complexity Revisited. SIAM J. Comput. 22(1): 211-219 (1993)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Noam Nisan: The Demand Query Model for Bipartite Matching: SODA 2021: 592-599&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cut Query Algorithms with Star Contraction</title>
      <link>https://sagnikm.github.io/publication/focs2022a/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/focs2022a/</guid>
      <description>&lt;p&gt;We study the complexity of determining the edge connectivity of a simple graph with cut queries.
We show that (i) there is a bounded-error randomized  algorithm that computes edge connectivity with $O(n)$ cut queries, and (ii) there is a bounded-error quantum algorithm that computes edge connectivity with $\tilde O(\sqrt{n})$ cut queries. To prove these results we introduce a new technique, called &lt;em&gt;star contraction&lt;/em&gt;, to randomly contract edges of a graph while preserving non-trivial minimum cuts.  In star contraction vertices randomly contract an edge incident on a small set of randomly chosen &amp;lsquo;center&amp;rsquo; vertices.  In contrast to the related 2-out contraction technique of Ghaffari, Nowicki, and Thorup [SODA&#39;20], star contraction only contracts vertex-disjoint star subgraphs, which allows it to be efficiently implemented via cut queries.&lt;/p&gt;
&lt;p&gt;The $O(n)$ bound from item (i) was not known even for the simpler problem of connectivity, and it improves the $O(n \log^3 n)$ upper bound by Rubinstein, Schramm, and Weinberg [ITCS&#39;18]. The bound is tight under the reasonable conjecture that the randomized communication complexity of connectivity is $\Omega(n \log n)$, an open question since the seminal work of Babai, Frankl, and Simon [FOCS&#39;86]. The bound also excludes using edge connectivity on simple graphs to prove a superlinear randomized query lower bound for minimizing a symmetric submodular function. The quantum algorithm from item~(ii) gives a nearly-quadratic separation with the randomized complexity, and addresses an open question of Lee, Santha, and Zhang [SODA&#39;21]. The algorithm can alternatively be viewed as computing the edge connectivity of a simple graph with $\tilde O(\sqrt{n})$ matrix-vector multiplication queries to its adjacency matrix.&lt;/p&gt;
&lt;p&gt;Finally, we demonstrate the use of star contraction outside of the cut query setting by designing a one-pass semi-streaming algorithm for computing edge connectivity in the complete vertex arrival setting. This contrasts with the edge arrival setting where two passes are required.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nearly Optimal Communication and Query Complexity of Bipartite Matching</title>
      <link>https://sagnikm.github.io/publication/focs2022b/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/focs2022b/</guid>
      <description>&lt;p&gt;We settle the complexities of the maximum-cardinality bipartite matching problem (BMM)
up to poly-logarithmic factors in five models of computation: the two-party communication,
AND query, OR query, XOR query, and quantum edge query models. Our results answer open
problems that have been raised repeatedly since at least three decades ago [Hajnal, Maass, and
Turan STOC’88; Ivanyos, Klauck, Lee, Santha, and de Wolf FSTTCS’12; Dobzinski, Nisan,
and Oren STOC’14; Nisan SODA’21] and tighten the lower bounds shown by Beniamini and
Nisan [STOC’21] and Zhang [ICALP’04]. We also settle the communication complexity of the
generalizations of BMM, such as maximum-cost bipartite b-matching and transshipment; and the
query complexity of unique bipartite perfect matching (answering an open question by Beniamini
[2022]). Our algorithms and lower bounds follow from simple applications of known techniques
such as cutting planes methods and set disjointness&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Faster Connectivity in Low-Rank Hypergraphs via Expander Decomposition</title>
      <link>https://sagnikm.github.io/publication/ipco2022/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/ipco2022/</guid>
      <description>&lt;p&gt;We design an algorithm for computing connectivity in hypergraphs which runs in time $\hat O_r(p + \min{\lambda n^2, n^r/\lambda})$, where $p$ is the size, $n$ is the number of vertices, $r$ is the rank (size of the largest hyperedge), and $\lambda$ is the connectivity of the hypergraph. The $\hat O_r(\cdot)$ hides terms that are subpolynomial in the main parameter and terms that depend only on $r$. Our algorithm is faster than existing algorithms when the connectivity $\lambda$ is $\Omega(n^{(r-2)/2})$.
The heart of our algorithm is a structural result regarding min-cuts in simple hypergraphs. We show a trade-off between the number of hyperedges taking part in all min-cuts and the size of the smaller side of the min-cut. This structural result can be viewed as a generalization of a well-known structural theorem for simple graphs [Kawarabayashi-Thorup, JACM 19].  We extend the framework of expander decomposition to simple hypergraphs in order to prove this structural result. We also make the proof of the structural result constructive to obtain our faster hypergraph connectivity algorithm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Note on Isolating Cut Lemma for Submodular Function Minimization</title>
      <link>https://sagnikm.github.io/publication/isolating_lemma_preprint/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/isolating_lemma_preprint/</guid>
      <description>&lt;p&gt;It has been observed independently by many researchers that the isolating cut lemma of
Li and Panigrahi [FOCS 2020] can be easily extended to obtain new algorithms for finding the
non-trivial minimizer of a symmetric submodular function and solving the hypergraph minimum
cut problem. This note contains these observations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Work-Optimal Parallel Minimum Cuts for Non-Sparse Graphs</title>
      <link>https://sagnikm.github.io/publication/spaa2021/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/spaa2021/</guid>
      <description>&lt;p&gt;We present the first work-optimal polylogarithmic-depth parallel algorithm for the minimum cut problem on non-sparse graphs. For $m\geq n^{1+\epsilon}$ for any constant $\epsilon&amp;gt;0$, our algorithm requires $O(m \log n)$ work and $O(\log^3 n)$ depth and succeeds with high probability.
Its work matches the best $O(m \log n)$ runtime for sequential algorithms [MN STOC’20; GMW SOSA&#39;21].  This improves the previous best work by Geissmann and Gianinazzi [SPAA&#39;18] by $O(\log^3 n)$ factor, while matching the depth of their algorithm. To do this, we design a work-efficient approximation algorithm and parallelize the recent sequential algorithms [MN STOC&#39;21; GMW SOSA&#39;21] that exploit a connection between 2-respecting minimum cuts and 2-dimensional orthogonal range searching.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Distributed Weighted Min-Cut in Nearly-Optimal Time</title>
      <link>https://sagnikm.github.io/publication/stoc2021a/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stoc2021a/</guid>
      <description>&lt;p&gt;Minimum-weight cut (min-cut) is a basic measure of a network&amp;rsquo;s connectivity strength. While the min-cut can be computed efficiently in the sequential setting [Karger STOC&#39;96], there was no efficient way for a distributed network to compute its own min-cut without limiting the input structure or dropping the output quality: In the standard CONGEST model, existing algorithms with nearly-optimal time (e.g. [Ghaffari, Kuhn, DISC&#39;13; Nanongkai, Su, DISC&#39;14]) can guarantee a solution that is $(1+\epsilon)$-approximation at best while the exact $\tilde O(n^{0.8} D^{0.2} + n^{0.9})$-time algorithm [Ghaffari, Nowicki, Thorup, SODA&#39;20] works only on &lt;em&gt;simple&lt;/em&gt; networks (no weights and no parallel edges). Throughout, $n$ and $D$ denote the network&amp;rsquo;s number of vertices and hop-diameter, respectively. For the weighted case, the best bound was $\tilde O(n)$ [Daga, Henzinger, Nanongkai, Saranurak, STOC&#39;19].&lt;/p&gt;
&lt;p&gt;In this paper, we provide an {\em exact} $\tilde O(\sqrt n + D)$-time algorithm for computing min-cut on &lt;em&gt;weighted&lt;/em&gt; networks. Our result improves even the previous algorithm that works only on simple networks. Its time complexity matches the known lower bound up to polylogarithmic factors.
At the heart of our algorithm are a clever routing trick and two structural lemmas regarding the structure of a minimum cut of a graph. These two structural lemmas considerably strengthen and generalize the framework of Mukhopadhyay-Nanongkai [STOC&#39;20] and can be of independent interest.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Breaking the Quadratic Barrier for Matroid Intersection</title>
      <link>https://sagnikm.github.io/publication/stoc2021b/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stoc2021b/</guid>
      <description>&lt;p&gt;The matroid intersection problem is a fundamental problem that has been extensively studied for half a century. In the classic version of this problem, we are given two matroids ${\cal M}_1 = (V, {\cal I}_1)$ and ${\cal M}_2 = (V, {\cal I}_2)$ on a comment ground set $V$ of $n$ elements, and then we have to find the largest common independent set $S \in {\cal I}_1 \cap {\cal I}_2$ by making  &lt;em&gt;independence oracle queries&lt;/em&gt;  of the form &amp;lsquo;&amp;lsquo;Is $S \in {\cal I}_1$?&amp;rsquo;&amp;rsquo; or &amp;lsquo;&amp;lsquo;Is $S \in {\cal I}_2$?&amp;rsquo;&amp;rsquo; for $S \subseteq V$. The goal is to minimize the number of queries.&lt;/p&gt;
&lt;p&gt;Beating the existing $\tilde O(n^2)$ bound, known as the &lt;em&gt;quadratic barrier&lt;/em&gt;, is an open problem that captures the limits of techniques from two lines of work. The first one is the classic Cunningham&amp;rsquo;s algorithm [SICOMP 1986], whose $\tilde O(n^2)$-query implementations were shown by CLS+ [FOCS 2019] and Nguyen [2019]. More generally, these algorithms take $\tilde O(nr)$ queries where $r$ denotes the rank which can be as big as $n$.  The other one is the general cutting plane method of Lee, Sidford, and Wong [FOCS 2015]. The only progress towards breaking the quadratic barrier requires either {\em approximation} algorithms or a more powerful &lt;em&gt;rank oracle query&lt;/em&gt; [CLS+ FOCS 2019]. No exact algorithm with $o(n^2)$ independence queries was known.&lt;/p&gt;
&lt;p&gt;In this work, we break the quadratic barrier with a randomized algorithm guaranteeing $\tilde O(n^{9/5})$ independence queries with high probability, and a deterministic algorithm guaranteeing $\tilde O(n^{11/6})$ independence queries. Our key insight is simple and fast algorithms to solve a graph reachability problem that arose in the standard augmenting path framework [Edmonds 1968]. Combining this with previous exact and approximation algorithms leads to our results.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Wowchemy, the website builder for Hugo</title>
      <link>https://sagnikm.github.io/post/getting-started/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site&lt;/li&gt;
&lt;li&gt;The template can be modified and customised to suit your needs. It&amp;rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a &lt;strong&gt;no-code solution (write in Markdown and customize with YAML parameters)&lt;/strong&gt; and having &lt;strong&gt;flexibility to later add even deeper personalization with HTML and CSS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more&lt;/li&gt;
&lt;/ol&gt;














&lt;figure  id=&#34;figure-the-template-is-mobile-first-with-a-responsive-design-to-ensure-that-your-site-looks-stunning-on-every-device&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/wowchemy/wowchemy-hugo-modules/master/academic.png&#34; alt=&#34;The template is mobile first with a responsive design to ensure that your site looks stunning on every device.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      The template is mobile first with a responsive design to ensure that your site looks stunning on every device.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&#34;get-started&#34;&gt;Get Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;👉 &lt;a href=&#34;https://wowchemy.com/templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Create a new site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📚 &lt;a href=&#34;https://wowchemy.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Personalize your site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💬 &lt;a href=&#34;https://discord.gg/z8wNYzb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chat with the &lt;strong&gt;Wowchemy community&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Hugo community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href=&#34;https://twitter.com/wowchemy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wowchemy&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeorgeCushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GeorgeCushen&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%28%23MadeWithWowchemy%20OR%20%23MadeWithAcademic%29&amp;amp;src=typed_query&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#MadeWithWowchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💡 &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Request a &lt;strong&gt;feature&lt;/strong&gt; or report a &lt;strong&gt;bug&lt;/strong&gt; for &lt;em&gt;Wowchemy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⬆️ &lt;strong&gt;Updating Wowchemy?&lt;/strong&gt; View the &lt;a href=&#34;https://wowchemy.com/docs/hugo-tutorials/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Update Tutorial&lt;/a&gt; and &lt;a href=&#34;https://wowchemy.com/updates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;crowd-funded-open-source-software&#34;&gt;Crowd-funded open-source software&lt;/h2&gt;
&lt;p&gt;To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.&lt;/p&gt;
&lt;h3 id=&#34;-click-here-to-become-a-sponsor-and-help-support-wowchemys-future-httpswowchemycomplans&#34;&gt;&lt;a href=&#34;https://wowchemy.com/plans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;❤️ Click here to become a sponsor and help support Wowchemy&amp;rsquo;s future ❤️&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a token of appreciation for sponsoring, you can &lt;strong&gt;unlock &lt;a href=&#34;https://wowchemy.com/plans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;these&lt;/a&gt; awesome rewards and extra features 🦄✨&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/wowchemy/hugo-academic-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Academic CLI&lt;/a&gt;:&lt;/strong&gt; Automatically import publications from BibTeX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inspiration&#34;&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or &lt;a href=&#34;https://wowchemy.com/user-stories/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://wowchemy.com/docs/page-builder/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://wowchemy.com/docs/import/jupyter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or &lt;a href=&#34;https://wowchemy.com/docs/install-locally/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable &lt;a href=&#34;https://wowchemy.com/docs/customization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 34+ language packs including English, 中文, and Português&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;p&gt;Wowchemy and its templates come with &lt;strong&gt;automatic day (light) and night (dark) mode&lt;/strong&gt; built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the &lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Demo&lt;/a&gt; to see it in action! Day/night mode can also be disabled by the site admin in &lt;code&gt;params.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/customization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Choose a stunning &lt;strong&gt;theme&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt;&lt;/a&gt; for your site. Themes are fully customizable.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Weighted Min-Cut: Sequential, Cut-Query and Streaming Algorithms</title>
      <link>https://sagnikm.github.io/publication/stoc2020/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stoc2020/</guid>
      <description>&lt;p&gt;Consider the following &lt;em&gt;2-respecting min-cut&lt;/em&gt; problem. Given a weighted graph $G$ and its spanning tree $T$, find the minimum cut among the cuts that contain at most two edges in $T$. This problem is an important subroutine in Karger&amp;rsquo;s celebrated randomized near-linear-time min-cut algorithm [STOC&#39;96]. We present a new approach for this problem which can be easily implemented in many settings, leading to the following randomized min-cut algorithms for weighted graphs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An $O\left(m\frac{\log^2 n}{\log\log n} + n\log^6 n\right)$-time sequential algorithm: This improves Karger&amp;rsquo;s long-standing $O(m \log^3 n)$ and $O\left(m\frac{(\log^2 n)\log (n^2/m)}{\log\log n} + n\log^6 n\right)$ bounds when the input graph is not extremely sparse or dense. Improvements over Karger&amp;rsquo;s bounds were previously known only under a rather strong assumption that the input graph is {\em simple} (unweighted without parallel edges) [Henzinger, Rao, Wang, SODA&#39;17; Ghaffari, Nowicki, Thorup, SODA&#39;20]. For unweighted graphs  (possibly with parallel edges) and using bit operations, our bound can be further improved to $O\left(m\frac{\log^{1.5} n}{\log\log n} + n\log^6 n\right)$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An algorithm that requires $\tilde O(n)$ &lt;em&gt;cut queries&lt;/em&gt; to compute the min-cut of a weighted graph: This answers an open problem by Rubinstein, Schramm, and Weinberg [ITCS&#39;18], who obtained a similar bound for simple graphs. Our bound is tight up to polylogarithmic factors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;streaming&lt;/em&gt; algorithm that requires $\tilde O(n)$ space and $O(\log n)$ passes to compute the min-cut: The only previous non-trivial exact min-cut algorithm in this setting is the 2-pass $\tilde O(n)$-space algorithm on simple graphs [Rubenstein et al. ITCS 2018] observed by Assadi, Chen, and Khanna [STOC&#39;19]).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast to Karger&amp;rsquo;s 2-respecting min-cut algorithm which deploys sophisticated dynamic programming techniques, our approach exploits some cute structural properties so that it only needs to compute the values of $\tilde O(n)$ cuts corresponding to removing $\tilde O(n)$ pairs of tree edges, an operation that can be done quickly in many settings.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simulation Theorems via Pseudo-random Properties</title>
      <link>https://sagnikm.github.io/publication/cc2019/</link>
      <pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/cc2019/</guid>
      <description>&lt;p&gt;We generalize the deterministic simulation theorem of Raz-Mckenzie, to any gadget which satisfies a certain hitting property. We prove that Inner-product and gap-Hamming satisfy this property, and, as a corollary, we obtain deterministic simulation theorem for these gadgets, where the gadget&amp;rsquo;s input-size is logarithmic in the input-size of the outer function. This yields the first deterministic simulation theorem with a logarithmic gadget size, answering an open question posed by Goos-Pitassi-Watson.&lt;/p&gt;
&lt;p&gt;Our result also implies the previous results for the Indexing gadget, with better parameters than was previously known. Moreover, a simulation theorem with logarithmic-sized gadget implies a quadratic separation in deterministic communication complexity and logarithm of the $1$-partition number, no matter how high the $1$-partition number is with respect to the input size&amp;mdash;something which is not achievable by previous results of Goos-Pitassi-Watson.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lifting Theorems for Equality</title>
      <link>https://sagnikm.github.io/publication/stacs2019/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stacs2019/</guid>
      <description>&lt;p&gt;We show a &lt;em&gt;deterministic simulation (or lifting) theorem&lt;/em&gt; for composed problems $f \circ \mathsf{Eq}_n$ where the inner function (the gadget) is Equality on $n$ bits. When $f$ is a total function on $p$ bits, it is easy to show via a rank argument that the communication complexity of $f\circ \mathsf{Eq}_n$ is $\Omega(deg(f) \cdot n)$. However, there is a surprising counter-example of a partial function $f$ on $p$ bits, such that any completion $f&#39;$ of $f$ has $\deg(f&#39;) = \Omega(p)$, and yet $f \circ \mathsf{Eq}_n$ has communication complexity $O(n)$. Nonetheless, we are able to show that the communication complexity of $f \circ \mathsf{Eq}_n$ is at least $D(f) \cdot n$ for a complexity measure $D(f)$ which is closely related to the AND-query complexity of $f$ and is lower-bounded by the logarithm of the leaf complexity of $f$. As a corollary, we also obtain lifting theorems for the set-disjointness gadget, and a lifting theorem in the context of parity decision-trees, for the NOR gadget.&lt;/p&gt;
&lt;p&gt;As an application, we prove a tight lower-bound for the deterministic communication complexity of the communication problem, where Alice and Bob are each given $p$-many $n$-bit strings, with the promise that either all of the strings are distinct, or all-but-one of the strings are distinct, and they wish to know which is the case. We show that the complexity of this problem is $\Theta(p \cdot n)$.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://sagnikm.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://owchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
   One 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   **Two** 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three 
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simulation Beats Richness: New Data-Structure Lower Bounds</title>
      <link>https://sagnikm.github.io/publication/stoc2018/</link>
      <pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stoc2018/</guid>
      <description>&lt;p&gt;We develop a technique for proving lower bounds in the setting of asymmetric communication, a model that was introduced in the famous works of Miltersen (STOC&#39;94) and Miltersen, Nisan, Safra and Wigderson (STOC&#39;95). At the core of our technique is a novel simulation theorem. Alice gets a $p \times n$ matrix $x$ over $\mathbb F_2$ and Bob gets a vector $y \in \mathbb F_2^n$.  Alice and Bob need to evaluate $f(x\cdot y)$ for a Boolean function $f$. Our simulation theorems show that a deterministic/randomized communication protocol exists for this problem, with cost $C\cdot n$ for Alice and $C$ for Bob, if and only if there exists a deterministic/randomized \emph{parity decision tree} of cost $\Theta(C)$ for evaluating $f$. As applications of this technique, we obtain the following results:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first strong lower-bounds against randomized data-structure schemes for the Vector-Matrix-Vector product problem over $\mathbb F_2$. Moreover, our method yields strong lower bounds even when the data-structure scheme has tiny advantage over random guessing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first lower bounds against randomized data-structures schemes for two natural Boolean variants of Orthogonal Vector Counting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We construct an asymmetric communication problem and obtain a deterministic lower-bound for it which is provably better than any lower-bound that may be obtained by the classical Richness Method of Miltersen et al. This seems to be the first known limitation of the Richness Method in the context of proving deterministic lower bounds.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Lower Bounds for Elimination via Weak Regularity</title>
      <link>https://sagnikm.github.io/publication/stacs-2017/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stacs-2017/</guid>
      <description>&lt;p&gt;We consider the problem of elimination in communication complexity, that was first raised by Ambainis et al. and later studied by Beimel et al. for its connection to the famous direct sum question. In this problem, let $f : {0, 1}^{2n} \to {0, 1}$ be any boolean function. Alice and Bob get $k$ inputs $x_1, \cdots , x_k$ and $y_1, \cdots, y_k$ respectively, with $x_i, y_i \in {0, 1}^n$. They want to output a $k$-bit vector $v$, such that there exists one index $i$ for which $v_i \neq f(x_i, y_i)$. We prove a general result lower bounding the randomized communication complexity of the elimination problem for $f$ using its discrepancy. Consequently, we obtain strong lower bounds for the functions &lt;em&gt;InnerProduct&lt;/em&gt; and  &lt;em&gt;Greater-Than&lt;/em&gt;, that work for exponentially larger values of $k$ than the best previous bounds. To prove our result, we use a pseudo-random notion called regularity that was first used by Raz and Wigderson. We show that functions with small discrepancy are regular. We also observe that a weaker notion, that we call weak-regularity, already implies hardness of elimination. Finally, we give a different proof, borrowing ideas from Viola, to show that Greater-Than is weakly regular.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Separation between Deterministic and Randomized Query Complexity</title>
      <link>https://sagnikm.github.io/publication/siam2018/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/siam2018/</guid>
      <description>&lt;p&gt;Saks and Wigderson [FOCS 1986] conjectured that $R_0(f)=\Omega(D(f)^{0.753\ldots})$ for all Boolean functions $f$. We show that for the pointer function $GPW_{r \times s}$ defined by Goos, Pitassi, and Watson [FOCS 2015], the following hold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$R_1(GPW_{r \times s})=\tilde\Theta(r + s)$ and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$R_1(\overline{GPW_{r \times s}})=\tilde \Theta(r + \sqrt{r}s)$,&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;where $R_1$ denotes the randomized one-sided error query complexity. These results imply that (i) $R_0(GPW_{s^2 \times s})=O(D(GPW_{s^2 \times s})^{2/3})$, thereby refuting the conjecture of Saks and Wigderson, and (ii)
$R_1(GPW_{s \times s})=\tilde O(R_0(GPW_{s \times s})^{2/3})$, thereby
providing a polynomial separation between the randomized zero-error and one
sided error query complexity measures.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Towards Better Separation between Deterministic and Randomized Query Complexity</title>
      <link>https://sagnikm.github.io/publication/fsttcs2015/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/fsttcs2015/</guid>
      <description>&lt;p&gt;We show that there exists a Boolean function $F$ which observes the following separations among deterministic query complexity $(D(F))$, randomized zero error query complexity $(R_0(F))$ and randomized one-sided error query complexity $(R_1(F))$: $R_1(F) = \widetilde{O}(\sqrt{D(F)})$ and $R_0(F)=\widetilde{O}(D(F))^{3/4}$. This refutes the conjecture made by Saks and Wigderson that for any Boolean function $f$, $R_0(f)=\Omega({D(f)})^{0.753..}$. This also shows widest separation between $R_1(f)$ and $D(f)$ for any Boolean function. The function $F$ was defined by Göös, Pitassi and Watson who studied it for showing a separation between deterministic decision tree complexity and unambiguous non-deterministic decision tree complexity. Independently of us, Ambainis et al proved that different variants of the function $F$ certify optimal (quadratic) separation between $D(f)$ and $R_0(f)$, and polynomial separation between $R_0(f)$ and $R_1(f)$. Viewed as separation results, our results are subsumed by those of Ambainis et al. However, while the functions considerd in the work of Ambainis et al are different variants of $F$, we work with the original function $F$ itself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tribes is Hard in Message-passing Model</title>
      <link>https://sagnikm.github.io/publication/stacs2015/</link>
      <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/publication/stacs2015/</guid>
      <description>&lt;p&gt;We consider the point-to-point message passing model of
communication in which there are $k$ processors with individual
private inputs, each $n$-bit long. Each processor is located at the
node of an underlying undirected graph and has access to private
random coins. An edge of the graph is a private channel of
communication between its endpoints. The processors have to compute
a given function of all their inputs by communicating along these
channels. While this model has been widely used in distributed
computing, strong lower bounds on the amount of communication needed
to compute simple functions have just begun to appear.&lt;/p&gt;
&lt;p&gt;In this work, we prove a tight lower bound of $\Omega(kn)$ on the
communication needed for computing the Tribes function, when the
underlying graph is a star of $k+1$ nodes that has $k$ leaves with
inputs and a center with no input. Lower bound on this topology
easily implies comparable bounds for others.  Our lower bounds are
obtained by building upon the recent information theoretic
techniques of Braverman et.al [FOCS&#39;13] and combining it
with the earlier work of Jayram, Kumar and Sivakumar [STOC&#39;03]. This approach yields
information complexity bounds that is of independent interest.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sagnikm.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://sagnikm.github.io/authors/admin/_index_bk1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sagnikm.github.io/authors/admin/_index_bk1/</guid>
      <description>&lt;p&gt;I am a post-doctoral researcher at the &lt;a href=&#34;https://di.ku.dk/english/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Department of Computer Science&lt;/a&gt; in the &lt;a href=&#34;https://www.ku.dk/english/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;University of Copenhagen&lt;/a&gt; since September 2021. My host is &lt;a href=&#34;https://sites.google.com/site/dannanongkai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Danupon Nanongkai&lt;/a&gt;. In my previous avatar, I was a researcher at &lt;a href=&#34;https://www.kth.se/en/csc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KTH Royal Institute of Technology&lt;/a&gt; during 2019-2021, a post-doctoral fellow at &lt;a href=&#34;https://iuuk.mff.cuni.cz/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IUUK, Charles University&lt;/a&gt;, hosted by &lt;a href=&#34;https://iuuk.mff.cuni.cz/~koucky/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Michal Koucký&lt;/a&gt; in 2018, in the &lt;a href=&#34;https://apc.csc.kth.se/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;APC group&lt;/a&gt; at KTH Royal Institute of Technology during 2017-2018, and a graduate student in theoretical computer science at &lt;a href=&#34;http://www.tcs.tifr.res.in/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TIFR Mumbai&lt;/a&gt; until August 2017, working under the guidance of &lt;a href=&#34;http://www.tcs.tifr.res.in/~arkadev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dr. Arkadev Chattopadhyay&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was a recipient of TCS Ph.D. Fellowship and my Ph.D. research work was supported by this fellowship.&lt;/p&gt;
&lt;h2 id=&#34;news&#34;&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;New paper on min-cut in &lt;strong&gt;SPAA 2021&lt;/strong&gt;. See publications section.&lt;/li&gt;
&lt;li&gt;I will join the the &lt;a href=&#34;https://www.sheffield.ac.uk/dcs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Department of Computer Science&lt;/a&gt; at the &lt;a href=&#34;https://www.sheffield.ac.uk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;University of Sheffield&lt;/a&gt; as a lecturer (Assistant professor in US terminology) in January 2022.&lt;/li&gt;
&lt;/ul&gt;
&lt;!---* Two papers in **STOC 2021**! See publications section.---&gt;
</description>
    </item>
    
  </channel>
</rss>
